<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>さとり世代のプログラマノート</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nakaiyusaku.github.io/"/>
  <updated>2018-10-14T13:14:22.120Z</updated>
  <id>https://nakaiyusaku.github.io/</id>
  
  <author>
    <name>Nakai Yusaku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Emscriptenを使用してC++からJavaScriptを生成してブラウザ上で動かしてみる話</title>
    <link href="https://nakaiyusaku.github.io/2018/10/14/EmscriptenIntroduction/"/>
    <id>https://nakaiyusaku.github.io/2018/10/14/EmscriptenIntroduction/</id>
    <published>2018-10-14T10:52:12.000Z</published>
    <updated>2018-10-14T13:14:22.120Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Emscriptenについて"><a href="#Emscriptenについて" class="headerlink" title="Emscriptenについて"></a>Emscriptenについて</h2><p>Emscriptenは、LLVMのビットコードからJavaScriptに変換するコンパイラで、<br>Emscriptenを使用すると、C/C++コードをJavaScriptに変換する事が出来る。</p><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>・ダウンロードとインストール<br>手順は公式サイト通りに<br><a href="https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html" target="_blank" rel="noopener">公式 : https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html</a></p><h2 id="コードを用意"><a href="#コードを用意" class="headerlink" title="コードを用意"></a>コードを用意</h2><p>Hello.cppを作成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;Hello&quot; &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="コンパイル"><a href="#コンパイル" class="headerlink" title="コンパイル"></a>コンパイル</h2><p>ターミナル上で、以下のコマンドを打つ<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emcc hello.cpp -o hello.html</span><br></pre></td></tr></table></figure></p><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>こんなページが出力される。<br><a href="https://nakaiyusaku.github.io/EmscriptenHello/hello.html">https://nakaiyusaku.github.io/EmscriptenHello/hello.html</a></p><p>コンソールにHelloと表示されていれば成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Emscriptenについて&quot;&gt;&lt;a href=&quot;#Emscriptenについて&quot; class=&quot;headerlink&quot; title=&quot;Emscriptenについて&quot;&gt;&lt;/a&gt;Emscriptenについて&lt;/h2&gt;&lt;p&gt;Emscriptenは、LLVMの
      
    
    </summary>
    
      <category term="Develop" scheme="https://nakaiyusaku.github.io/categories/Develop/"/>
    
    
      <category term="Emscripten" scheme="https://nakaiyusaku.github.io/tags/Emscripten/"/>
    
      <category term="C++" scheme="https://nakaiyusaku.github.io/tags/C/"/>
    
      <category term="JavaScript" scheme="https://nakaiyusaku.github.io/tags/JavaScript/"/>
    
      <category term="WebAssembly" scheme="https://nakaiyusaku.github.io/tags/WebAssembly/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Flowを使って、ブログ記事の投稿をTwitterで自動的に告知する方法</title>
    <link href="https://nakaiyusaku.github.io/2018/10/02/TweetByMSFlow/"/>
    <id>https://nakaiyusaku.github.io/2018/10/02/TweetByMSFlow/</id>
    <published>2018-10-02T14:58:07.000Z</published>
    <updated>2018-10-14T10:53:51.687Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Microsoft-Flow-とは"><a href="#Microsoft-Flow-とは" class="headerlink" title="Microsoft Flow とは"></a>Microsoft Flow とは</h2><p>Microsoft公式のタスク自動化ツールです。<br>私たちが普段使っているWebサービス同士を連携させたり、自作のWebサービスにおいてもWebAPIを用意する事で他のWebサービスと連携させる事で、あらゆる自動化がノンコーディングで簡単に行えます。毎月750個のFlow(自動タスク)まで無料で使う事ができます。<br><a href="https://japan.flow.microsoft.com/ja-jp/" target="_blank" rel="noopener">公式 : https://japan.flow.microsoft.com/ja-jp/</a></p><p>今回はMicrosoft Flowで、RSSとTwitterを使ってブログ記事の投稿告知を自動化してみます。</p><h2 id="ブログ記事の投稿をTwitterで告知する"><a href="#ブログ記事の投稿をTwitterで告知する" class="headerlink" title="ブログ記事の投稿をTwitterで告知する"></a>ブログ記事の投稿をTwitterで告知する</h2><p>RSSの更新を検知し、TwitterでTweetするFlowを作成します。<br>Microsoft Flowには、公式で数多くのFlowテンプレートが存在しており、今回の目的のRSSとTwitterの連携も既にテンプレートが用意されていました。<br>↓このように多数のテンプレートが使用できます。<br><img src="/2018/10/02/TweetByMSFlow/Template.PNG" title="Microsoft Flowのテンプレート例"></p><p>実際に作成したFlowがこちらです。<br><img src="/2018/10/02/TweetByMSFlow/Flow.PNG" title="実際に作成したFlow"></p><p>実際に投稿してみます。(この記事)<br>えー、何回も失敗しました。笑<br>原因はHexoの設定だったようです。(URLを間違えていた。笑)<br>↓成功した際の実際の投稿です。<br><br>// TODO</p><h2 id="自動化の理由-Github-Pagesの問題点"><a href="#自動化の理由-Github-Pagesの問題点" class="headerlink" title="自動化の理由(Github Pagesの問題点)"></a>自動化の理由(Github Pagesの問題点)</h2><p>本ブログはGithub Pagesで運用しています。<br>Github Pagesでは、記事を投稿してから実際に反映されるまで、たまにラグがあります。酷い時は数時間ものラグがあるそうです。<br>記事を投稿しても、Twitterでそれを告知するには、記事投稿が反映されるのを待たなければいけません。<br>しかし、記事投稿の反映を待って、確認して、告知するのでは面倒です。<br>記事投稿の反映がされたタイミングで、自動でTwitterで告知したいと思うのがプログラマの常です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Microsoft-Flow-とは&quot;&gt;&lt;a href=&quot;#Microsoft-Flow-とは&quot; class=&quot;headerlink&quot; title=&quot;Microsoft Flow とは&quot;&gt;&lt;/a&gt;Microsoft Flow とは&lt;/h2&gt;&lt;p&gt;Micro
      
    
    </summary>
    
      <category term="Develop" scheme="https://nakaiyusaku.github.io/categories/Develop/"/>
    
    
      <category term="Github Pages" scheme="https://nakaiyusaku.github.io/tags/Github-Pages/"/>
    
      <category term="Microsoft Flow" scheme="https://nakaiyusaku.github.io/tags/Microsoft-Flow/"/>
    
      <category term="Twitter" scheme="https://nakaiyusaku.github.io/tags/Twitter/"/>
    
  </entry>
  
  <entry>
    <title>Windows環境でHexoとVSCodeでGithub PagesにDeployする方法</title>
    <link href="https://nakaiyusaku.github.io/2018/09/29/HexoDeployWithWindowsVSCode/"/>
    <id>https://nakaiyusaku.github.io/2018/09/29/HexoDeployWithWindowsVSCode/</id>
    <published>2018-09-29T13:44:55.000Z</published>
    <updated>2018-10-14T10:53:47.640Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h2><p>・Github Pagesの用意<br>・VSCodeの拡張機能 vscode-hexo をインストール</p><h2 id="爆速のブログ生成"><a href="#爆速のブログ生成" class="headerlink" title="爆速のブログ生成"></a>爆速のブログ生成</h2><p>VSCodeでターミナルを開き、以下を順に打ち込みます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init [適当なプロジェクト名]</span><br><span class="line">cd [適当なプロジェクト名]</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>これで、[適当なプロジェクト名]フォルダが作成されて、ブログ生成に必要なインストール等は完了しています。</p><p>続いて、ターミナルで以下を打ち込みます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>ターミナルに</p><blockquote><p>INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p></blockquote><p>などと表示されているかと思います。</p><p>Ctrl+Cでアクセスするとブログを確認する事ができます。<br>正常に動作していれば、これでとりあえずブログ自体の生成には成功です。</p><h2 id="Github-Pagesへのデプロイ"><a href="#Github-Pagesへのデプロイ" class="headerlink" title="Github Pagesへのデプロイ"></a>Github Pagesへのデプロイ</h2><p>まずは必要なHexoプラグインをインストールします。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></p><p>続いて、[適当なプロジェクト名]/_config.ymlを開き、以下の場所を設定します。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/[username]/[repositoryname].git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>続いて、ターミナルで以下を打ち込むとデプロイされます。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></table></figure></p><h2 id="しかし出来ない"><a href="#しかし出来ない" class="headerlink" title="しかし出来ない"></a>しかし出来ない</h2><p>デプロイ時に以下のようなエラーが出る方がいると思われます。<br>私はここでハマりました。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fatal: HttpRequestException encountered.</span><br><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><blockquote><p>結論<br>gitの設定を行うと上手くいきました。<br>globalじゃないといけないのが辛いけど。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; git config --global credential.helper wincred</span><br><span class="line">&gt; git config --global user.name &quot;ユーザー名&quot;</span><br><span class="line">&gt; git config --global user.email &quot;githubに登録しているメールアドレス&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;準備&quot;&gt;&lt;a href=&quot;#準備&quot; class=&quot;headerlink&quot; title=&quot;準備&quot;&gt;&lt;/a&gt;準備&lt;/h2&gt;&lt;p&gt;・Github Pagesの用意&lt;br&gt;・VSCodeの拡張機能 vscode-hexo をインストール&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Develop" scheme="https://nakaiyusaku.github.io/categories/Develop/"/>
    
    
      <category term="Hexo" scheme="https://nakaiyusaku.github.io/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://nakaiyusaku.github.io/tags/Github-Pages/"/>
    
      <category term="Windows" scheme="https://nakaiyusaku.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://nakaiyusaku.github.io/2018/09/28/hello-world/"/>
    <id>https://nakaiyusaku.github.io/2018/09/28/hello-world/</id>
    <published>2018-09-28T10:53:28.193Z</published>
    <updated>2018-09-28T18:12:20.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>Thank you for visiting.<br>Created blog by Hexo.<br>See you again!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h2&gt;&lt;p&gt;Thank you for visiting.&lt;br&gt;Created
      
    
    </summary>
    
    
  </entry>
  
</feed>
